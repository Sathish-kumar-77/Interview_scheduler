// <auto-generated />
using System;
using Assignment.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250306054609_InitialCreate11")]
    partial class InitialCreate11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReportingManagerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportingManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ManagerParticipation")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PanelMemberId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TAAdminId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TARecruiterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PanelMemberId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TAAdminId");

                    b.HasIndex("TARecruiterId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelCoordinator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("usersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("usersUserId");

                    b.ToTable("PanelCoordinators");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AllocatedEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AllocatedStartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InterviewLevel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PanelCoordinatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PanelCoordinatorId");

                    b.HasIndex("UserId");

                    b.ToTable("PanelMembers");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportingManagers");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PanelMemberId1")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("SlotId");

                    b.HasIndex("PanelMemberId1");

                    b.ToTable("AvailabilitySlots");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TAAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TAAdmins");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TARecruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TARecruiters");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SuperAdminUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SuperAdminUserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.SuperAdmin", b =>
                {
                    b.HasBaseType("Assignment.Contracts.Data.Entities.Users");

                    b.HasDiscriminator().HasValue("SuperAdmin");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.ReportingManager", "ReportingManager")
                        .WithMany("Candidates")
                        .HasForeignKey("ReportingManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportingManager");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Interview", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Candidate", "Candidate")
                        .WithMany("Interviews")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.PanelMember", "PanelMember")
                        .WithMany()
                        .HasForeignKey("PanelMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Contracts.Data.Entities.TAAdmin", null)
                        .WithMany("ManagedInterviews")
                        .HasForeignKey("TAAdminId");

                    b.HasOne("Assignment.Contracts.Data.Entities.TARecruiter", "TARecruiter")
                        .WithMany("ScheduledInterviews")
                        .HasForeignKey("TARecruiterId");

                    b.Navigation("Candidate");

                    b.Navigation("PanelMember");

                    b.Navigation("Slot");

                    b.Navigation("TARecruiter");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelCoordinator", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "users")
                        .WithMany()
                        .HasForeignKey("usersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.PanelCoordinator", null)
                        .WithMany("PanelMembers")
                        .HasForeignKey("PanelCoordinatorId");

                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Slot", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.PanelMember", "PanelMember")
                        .WithMany("Slots")
                        .HasForeignKey("PanelMemberId1");

                    b.Navigation("PanelMember");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TAAdmin", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TARecruiter", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.User", b =>
                {
                    b.HasOne("Assignment.Contracts.Data.Entities.SuperAdmin", null)
                        .WithMany("ManagedUsers")
                        .HasForeignKey("SuperAdminUserId");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.Candidate", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelCoordinator", b =>
                {
                    b.Navigation("PanelMembers");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.PanelMember", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.ReportingManager", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TAAdmin", b =>
                {
                    b.Navigation("ManagedInterviews");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.TARecruiter", b =>
                {
                    b.Navigation("ScheduledInterviews");
                });

            modelBuilder.Entity("Assignment.Contracts.Data.Entities.SuperAdmin", b =>
                {
                    b.Navigation("ManagedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
